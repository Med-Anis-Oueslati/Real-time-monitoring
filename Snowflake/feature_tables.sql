-- Feature tables
CREATE OR REPLACE TABLE SPARK_DB.SPARK_SCHEMA.DNS_FEATURES
CLUSTER BY (YEAR(TS_WINDOW), MONTH(TS_WINDOW), DAY(TS_WINDOW)) (
    TS_WINDOW TIMESTAMP_NTZ(9),
    ID_ORIG_H VARCHAR(16777216),
    QUERY_RATE FLOAT,
    UNIQUE_QUERIES NUMBER(38,0),
    AVG_QUERY_LEN FLOAT,
    QUERY_NAME_ENTROPY FLOAT,
    VM_ID VARCHAR(16777216)
);

CREATE OR REPLACE TABLE SPARK_DB.SPARK_SCHEMA.NOTICE_FEATURES
CLUSTER BY (YEAR(TS_WINDOW), MONTH(TS_WINDOW), DAY(TS_WINDOW)) (
    TS_WINDOW TIMESTAMP_NTZ(9),
    ID_ORIG_H VARCHAR(16777216),
    DNS_TUNNELING_NOTICES NUMBER(38,0),
    AVG_NOTICE_MSG_LEN FLOAT,
    VM_ID VARCHAR(16777216)
);

-- Baseline table
CREATE OR REPLACE TABLE SPARK_DB.SPARK_SCHEMA.DNS_BASELINE
CLUSTER BY (ID_ORIG_H) (
    ID_ORIG_H VARCHAR(16777216),
    METRIC VARCHAR(16777216),
    MEAN FLOAT,
    STD_DEV FLOAT,
    LAST_UPDATED TIMESTAMP_NTZ(9)
);

-- Anomalies table
CREATE OR REPLACE TABLE SPARK_DB.SPARK_SCHEMA.ANOMALIES
CLUSTER BY (YEAR(TIMESTAMP), MONTH(TIMESTAMP), DAY(TIMESTAMP)) (
    TIMESTAMP TIMESTAMP_NTZ(9),
    ID_ORIG_H VARCHAR(16777216),
    VM_ID VARCHAR(16777216),
    ANOMALY_TYPE VARCHAR(16777216),
    SCORE FLOAT,
    DETAILS VARCHAR(16777216)
);

-- Compute baselines (run weekly via scheduled task)
INSERT INTO SPARK_DB.SPARK_SCHEMA.DNS_BASELINE
SELECT 
    ID_ORIG_H,
    'QUERY_RATE' AS METRIC,
    AVG(QUERY_RATE) AS MEAN,
    STDDEV(QUERY_RATE) AS STD_DEV,
    CURRENT_TIMESTAMP AS LAST_UPDATED
FROM SPARK_DB.SPARK_SCHEMA.DNS_FEATURES
WHERE TS_WINDOW >= DATEADD(DAY, -7, CURRENT_TIMESTAMP)
GROUP BY ID_ORIG_H;